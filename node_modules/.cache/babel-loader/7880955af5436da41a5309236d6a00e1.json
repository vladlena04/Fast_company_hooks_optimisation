{"ast":null,"code":"export function validator(data, config) {\n  const errors = {};\n\n  function validate(validateMethod, data, config) {\n    let statusValidate;\n\n    switch (validateMethod) {\n      case \"isRequired\":\n        {\n          if (typeof data === \"boolean\") {\n            statusValidate = !data;\n          } else {\n            statusValidate = data.trim() === \"\";\n          }\n\n          break;\n        }\n\n      case \"isEmail\":\n        {\n          const emailRegExp = /^\\S+@\\S+\\.\\S+$/g;\n          statusValidate = !emailRegExp.test(data);\n          break;\n        }\n\n      case \"isCapitalSymbol\":\n        {\n          const capitalRegExp = /[A-Z]+/g;\n          statusValidate = !capitalRegExp.test(data);\n          break;\n        }\n\n      case \"isContainDigit\":\n        {\n          const digitRegExp = /\\d+/g;\n          statusValidate = !digitRegExp.test(data);\n          break;\n        }\n\n      case \"min\":\n        {\n          statusValidate = data.length < config.value;\n          break;\n        }\n\n      default:\n        break;\n    }\n\n    if (statusValidate) return config.message;\n  }\n\n  for (const fieldName in data) {\n    for (const validateMethod in config[fieldName]) {\n      const error = validate(validateMethod, data[fieldName], config[fieldName][validateMethod]);\n\n      if (error && !errors[fieldName]) {\n        errors[fieldName] = error;\n      }\n    }\n  }\n\n  return errors;\n}","map":{"version":3,"sources":["/Users/vladlenabonk/Documents/GitHub/Fast_company_hooks_optimisation/src/app/utils/validator.js"],"names":["validator","data","config","errors","validate","validateMethod","statusValidate","trim","emailRegExp","test","capitalRegExp","digitRegExp","length","value","message","fieldName","error"],"mappings":"AAAA,OAAO,SAASA,SAAT,CAAmBC,IAAnB,EAAyBC,MAAzB,EAAiC;AACpC,QAAMC,MAAM,GAAG,EAAf;;AACA,WAASC,QAAT,CAAkBC,cAAlB,EAAkCJ,IAAlC,EAAwCC,MAAxC,EAAgD;AAC5C,QAAII,cAAJ;;AACA,YAAQD,cAAR;AACI,WAAK,YAAL;AAAmB;AACf,cAAI,OAAOJ,IAAP,KAAgB,SAApB,EAA+B;AAC3BK,YAAAA,cAAc,GAAG,CAACL,IAAlB;AACH,WAFD,MAEO;AACHK,YAAAA,cAAc,GAAGL,IAAI,CAACM,IAAL,OAAgB,EAAjC;AACH;;AACD;AACH;;AACD,WAAK,SAAL;AAAgB;AACZ,gBAAMC,WAAW,GAAG,iBAApB;AACAF,UAAAA,cAAc,GAAG,CAACE,WAAW,CAACC,IAAZ,CAAiBR,IAAjB,CAAlB;AACA;AACH;;AACD,WAAK,iBAAL;AAAwB;AACpB,gBAAMS,aAAa,GAAG,SAAtB;AACAJ,UAAAA,cAAc,GAAG,CAACI,aAAa,CAACD,IAAd,CAAmBR,IAAnB,CAAlB;AACA;AACH;;AACD,WAAK,gBAAL;AAAuB;AACnB,gBAAMU,WAAW,GAAG,MAApB;AACAL,UAAAA,cAAc,GAAG,CAACK,WAAW,CAACF,IAAZ,CAAiBR,IAAjB,CAAlB;AACA;AACH;;AACD,WAAK,KAAL;AAAY;AACRK,UAAAA,cAAc,GAAGL,IAAI,CAACW,MAAL,GAAcV,MAAM,CAACW,KAAtC;AACA;AACH;;AACD;AACI;AA7BR;;AA+BA,QAAIP,cAAJ,EAAoB,OAAOJ,MAAM,CAACY,OAAd;AACvB;;AACD,OAAK,MAAMC,SAAX,IAAwBd,IAAxB,EAA8B;AAC1B,SAAK,MAAMI,cAAX,IAA6BH,MAAM,CAACa,SAAD,CAAnC,EAAgD;AAC5C,YAAMC,KAAK,GAAGZ,QAAQ,CAClBC,cADkB,EAElBJ,IAAI,CAACc,SAAD,CAFc,EAGlBb,MAAM,CAACa,SAAD,CAAN,CAAkBV,cAAlB,CAHkB,CAAtB;;AAKA,UAAIW,KAAK,IAAI,CAACb,MAAM,CAACY,SAAD,CAApB,EAAiC;AAC7BZ,QAAAA,MAAM,CAACY,SAAD,CAAN,GAAoBC,KAApB;AACH;AACJ;AACJ;;AACD,SAAOb,MAAP;AACH","sourcesContent":["export function validator(data, config) {\n    const errors = {};\n    function validate(validateMethod, data, config) {\n        let statusValidate;\n        switch (validateMethod) {\n            case \"isRequired\": {\n                if (typeof data === \"boolean\") {\n                    statusValidate = !data;\n                } else {\n                    statusValidate = data.trim() === \"\";\n                }\n                break;\n            }\n            case \"isEmail\": {\n                const emailRegExp = /^\\S+@\\S+\\.\\S+$/g;\n                statusValidate = !emailRegExp.test(data);\n                break;\n            }\n            case \"isCapitalSymbol\": {\n                const capitalRegExp = /[A-Z]+/g;\n                statusValidate = !capitalRegExp.test(data);\n                break;\n            }\n            case \"isContainDigit\": {\n                const digitRegExp = /\\d+/g;\n                statusValidate = !digitRegExp.test(data);\n                break;\n            }\n            case \"min\": {\n                statusValidate = data.length < config.value;\n                break;\n            }\n            default:\n                break;\n        }\n        if (statusValidate) return config.message;\n    }\n    for (const fieldName in data) {\n        for (const validateMethod in config[fieldName]) {\n            const error = validate(\n                validateMethod,\n                data[fieldName],\n                config[fieldName][validateMethod]\n            );\n            if (error && !errors[fieldName]) {\n                errors[fieldName] = error;\n            }\n        }\n    }\n    return errors;\n}\n"]},"metadata":{},"sourceType":"module"}